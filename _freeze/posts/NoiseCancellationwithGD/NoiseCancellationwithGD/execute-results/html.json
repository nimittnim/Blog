{
  "hash": "f7732089af7ce1e8bc70efbcc26a15be",
  "result": {
    "engine": "jupyter",
    "markdown": "---\njupyter: python3\n---\n\n\n\n\n**Noise Cancellation Using Digital Filter**\n\nWe use digital filter to model a system and in the process remove correlated signal passed from the system (Noise) leaving behind filtered signal\n\n::: {#998e297b .cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nfrom matplotlib.image import imread\nimport numpy as np\nimport math\n```\n:::\n\n\n::: {#434207a5 .cell execution_count=2}\n``` {.python .cell-code}\n# FIR filter\n\ndef filter(w1,w2,w3,x1,x2,x3):\n    return w1*x1+w2*x2+w3*x3\n```\n:::\n\n\n::: {#e29c58db .cell execution_count=3}\n``` {.python .cell-code}\n# Original_signal\n\nfs = 1000  \nt = np.linspace(0, 2, fs, endpoint=False)  \noriginal_signal = np.sin(2 * np.pi * 5 * t) \n```\n:::\n\n\n::: {#444e6d88 .cell execution_count=4}\n``` {.python .cell-code}\n# Adding noise to the signal\n\nnoise =  1 * np.random.normal(size=len(t)) \nnoised_signal = noise + original_signal\n\nplt.plot(t, noise)\nplt.show()\n\nplt.plot(t, noised_signal)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](NoiseCancellationwithGD_files/figure-html/cell-5-output-1.png){width=569 height=411}\n:::\n\n::: {.cell-output .cell-output-display}\n![](NoiseCancellationwithGD_files/figure-html/cell-5-output-2.png){width=569 height=411}\n:::\n:::\n\n\n::: {#d9111c05 .cell execution_count=5}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef system(signal, window_size):\n    filtered_signal = np.zeros_like(signal)\n    for i in range(len(signal)):\n        start = max(0, i - window_size + 1)\n        end = i + 1\n        filtered_signal[i] = (np.mean(signal[start:end]))*20\n    return filtered_signal\n\n\nwindow_size = 3\nsystem_signal = system(noised_signal, window_size)\nplt.figure(figsize=(10, 6))\nplt.plot(t, noised_signal, label='Original Signal')\nplt.plot(t, system_signal, label='System Signal')\nplt.xlabel('Time (s)')\nplt.ylabel('Amplitude')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](NoiseCancellationwithGD_files/figure-html/cell-6-output-1.png){width=819 height=503}\n:::\n:::\n\n\n::: {#9a2ab9fc .cell execution_count=6}\n``` {.python .cell-code}\n# Original Signal through system\n\noriginal_system_signal = system(original_signal,window_size)\nplt.plot(t, original_system_signal, label='Original System Signal')\n```\n\n::: {.cell-output .cell-output-display}\n![](NoiseCancellationwithGD_files/figure-html/cell-7-output-1.png){width=577 height=411}\n:::\n:::\n\n\n::: {#a72b4a0c .cell execution_count=7}\n``` {.python .cell-code}\ndef adaptive_noise_cancellation(primary_signal, noise_reference, mu, filter_length):\n    N = len(primary_signal)\n    filtered_signal = np.zeros(N)\n    w = np.zeros(filter_length)  \n\n    for i in range(filter_length, N):\n        x = noise_reference[i-filter_length+1:i+1][::-1]  \n        d = primary_signal[i] \n\n        y = np.dot(w, x) \n        error = d - y  \n\n        w = w + 2 * mu * error * x  \n        filtered_signal[i] = primary_signal[i] - y \n\n    return (filtered_signal,w)\n\n\nmu = 0.00001\nfilter_length = 3\nfiltered_signal, weights  = adaptive_noise_cancellation(system_signal, 10*noise, mu, filter_length)\n\n\nplt.figure(figsize=(10, 6))\nplt.plot(t, system_signal, label='System Signal')\nplt.plot(t, filtered_signal, label='Filtered Signal (Adaptive Noise Cancellation)')\nplt.plot(t, original_system_signal, label='Original System Signal')\nplt.xlabel('Time (s)')\nplt.ylabel('Amplitude')\nplt.legend()\nplt.show()\n\nprint(weights)\n```\n\n::: {.cell-output .cell-output-display}\n![](NoiseCancellationwithGD_files/figure-html/cell-8-output-1.png){width=819 height=503}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[0.61318631 0.60747856 0.6104417 ]\n```\n:::\n:::\n\n\n",
    "supporting": [
      "NoiseCancellationwithGD_files"
    ],
    "filters": [],
    "includes": {}
  }
}